hmLoadTopic({
hmKeywords:"",
hmTitle:"Lifecycle state",
hmDescription:"The lifecycle state represents the actual lifecycle state of a catalog element. It can be used to restrict access of elements to a certain group of services or people.",
hmPrevLink:"display-groups.html",
hmNextLink:"component-types.html",
hmParentLink:"catalog-service.html",
hmBreadCrumbs:"<a href=\"neutral-backend-infrastructure.html\">Neutral backend infrastructure<\/a> &gt; <a href=\"catalog-service.html\">HsM Catalog Service<\/a>",
hmTitlePath:"Neutral backend infrastructure > HsM Catalog Service > Lifecycle state",
hmHeader:"<h1 class=\"p_Heading1\"><span class=\"f_Heading1\">Lifecycle state<\/span><\/h1>\n\r",
hmBody:"<p class=\"p_Normal\">The lifecycle state represents the actual lifecycle state of a catalog element. It can be used to restrict access of elements to a certain group of services or people.<\/p>\n\r<p class=\"p_Normal\">&nbsp;<\/p>\n\r<p class=\"p_Normal\">The lifecycle state applies to following elements:<\/p>\n\r<p class=\"p_Normal\">&nbsp;<\/p>\n\r<p class=\"p_Normal\">Device Type<\/p>\n\r<p class=\"p_Normal\">Component Type Placeholder<\/p>\n\r<p class=\"p_Normal\">Component Type<\/p>\n\r<p class=\"p_Normal\">Component Type Variant<\/p>\n\r<p class=\"p_Normal\">Component Type Variant Version<\/p>\n\r<p class=\"p_Normal\">Following lifecycle states are defined (listed in ascending order):<\/p>\n\r<p class=\"p_Normal\">&nbsp;<\/p>\n\r<p class=\"p_Normal\">Alpha (catalog elements visible only to Hagleitner)<\/p>\n\r<p class=\"p_Normal\">Beta (catalog elements visible to Hagleitner and OEM partners)<\/p>\n\r<p class=\"p_Normal\">Published (catalog elements visible to everybody)<\/p>\n\r<p class=\"p_Normal\">Deprecated (catalog elements that were once published, but are not produced, maintained or supported any more)<\/p>\n\r<p class=\"p_Normal\">Lifecycle states are comparable, i.e. they can be compared with less, greater or equal operators.<\/p>\n\r<p class=\"p_Normal\">&nbsp;<\/p>\n\r<p class=\"p_Normal\">Modifying the lifecycle state<\/p>\n\r<p class=\"p_Normal\">The lifecycle state of a catalog element can change over time, but only specific changes are allowed.<\/p>\n\r<p class=\"p_Normal\">&nbsp;<\/p>\n\r<p class=\"p_Normal\">Alpha → Beta → Published → Deprecated<\/p>\n\r<p class=\"p_Normal\">I.e. it is not allowed to change from a Published lifecycle state to a Beta lifecycle state. It is also not allowed to change from Beta to Deprecated directly.<\/p>\n\r<p class=\"p_Normal\">&nbsp;<\/p>\n\r<p class=\"p_Normal\">Effective lifecycle state<\/p>\n\r<p class=\"p_Normal\">Besides the lifecycle state of a catalog element, an effective lifecycle state can be calculated. The effective lifecycle state takes the lifecycle states of underlying elements into account.<\/p>\n\r<p class=\"p_Normal\">&nbsp;<\/p>\n\r<p class=\"p_Normal\">Note: Alpha and Beta represent an inconsistent effective state. This means that the effective lifecycle state of a device type can change from Beta to Alpha, by adding new mandatory component type placeholders to a device type. Adding new mandatory placeholders to a device type, is not possible as soon as the device type has a lifecycle state of Published or Deprecated. This guarantees a consistent state.<\/p>\n\r<p class=\"p_Normal\">&nbsp;<\/p>\n\r<p class=\"p_Normal\">Component type variant version<\/p>\n\r<p class=\"p_Normal\">Since the component type variant version is a leaf node in the device type tree-structure, its effective lifecycle state is equal to its own lifecycle state.<\/p>\n\r<p class=\"p_Normal\">&nbsp;<\/p>\n\r<p class=\"p_Normal\">Version.EffectiveLifecycleState = Version.LifecycleState<\/p>\n\r<p class=\"p_Normal\">&nbsp;<\/p>\n\r<p class=\"p_Normal\">Component type variant<\/p>\n\r<p class=\"p_Normal\">A variant\'s effective lifecycle state cannot be greater than its own lifecycle state. It can however be smaller, if all its versions have a smaller lifecycle state.<\/p>\n\r<p class=\"p_Normal\">&nbsp;<\/p>\n\r<p class=\"p_Normal\">Variant.EffectiveLifecycleState = min(Variant.LifecycleState, max(Variant.Versions.LifecycleState))<\/p>\n\r<p class=\"p_Normal\">&nbsp;<\/p>\n\r<p class=\"p_Normal\">Component type<\/p>\n\r<p class=\"p_Normal\">A component type\'s effective lifecycle state cannot be greater than its own lifecycle state. It can however be smaller, if all its variants have a smaller effective lifecycle state.<\/p>\n\r<p class=\"p_Normal\">&nbsp;<\/p>\n\r<p class=\"p_Normal\">Component.EffectiveLifecycleState = min(Component.LifecycleState, max(Component.Variants.EffectiveLifecycleState))<\/p>\n\r<p class=\"p_Normal\">&nbsp;<\/p>\n\r<p class=\"p_Normal\">Component type placeholder<\/p>\n\r<p class=\"p_Normal\">A placeholder\'s effective lifecycle state cannot be greater than its own lifecycle state. It can however be smaller, if the according component type has a smaller effective lifecycle state.<\/p>\n\r<p class=\"p_Normal\">&nbsp;<\/p>\n\r<p class=\"p_Normal\">Placeholder.EffectiveLifecycleState = min(Placeholder.LifecycleState, Placeholder.Component.EffectiveLifecycleState)<\/p>\n\r<p class=\"p_Normal\">&nbsp;<\/p>\n\r<p class=\"p_Normal\">Device type<\/p>\n\r<p class=\"p_Normal\">A device type\'s effective lifecycle state cannot be greater than its own lifecycle state. It can however be smaller, if one of its mandatory placeholders has a smaller effective lifecycle state.<\/p>\n\r<p class=\"p_Normal\">&nbsp;<\/p>\n\r<p class=\"p_Normal\">DeviceType.EffectiveLifecycleState = min(DeviceType.LifecycleState, min(DeviceType.Placeholders.EffectiveLifecycleState))<\/p>\n\r"
})
